/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export interface Message extends AstNode {
    readonly $container: Model;
    readonly $type: 'Message';
    body: Array<TypeAssignment>
    name: string
}

export const Message = 'Message';

export function isMessage(item: unknown): item is Message {
    return reflection.isInstance(item, Message);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    message: Array<Message>
    type: Array<Type>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Param extends AstNode {
    readonly $type: 'Param';
    name: string
}

export const Param = 'Param';

export function isParam(item: unknown): item is Param {
    return reflection.isInstance(item, Param);
}

export interface PrimitiveType extends AstNode {
    readonly $container: TypeAssignment;
    readonly $type: 'PrimitiveType';
    type: 'boolean' | 'number' | 'string'
}

export const PrimitiveType = 'PrimitiveType';

export function isPrimitiveType(item: unknown): item is PrimitiveType {
    return reflection.isInstance(item, PrimitiveType);
}

export interface Type extends AstNode {
    readonly $container: Model;
    readonly $type: 'Type';
    body: Array<TypeAssignment>
    name: string
}

export const Type = 'Type';

export function isType(item: unknown): item is Type {
    return reflection.isInstance(item, Type);
}

export interface TypeAssignment extends AstNode {
    readonly $container: Message | Type;
    readonly $type: 'TypeAssignment';
    name: string
    type?: PrimitiveType
    typeRef?: Reference<Type>
}

export const TypeAssignment = 'TypeAssignment';

export function isTypeAssignment(item: unknown): item is TypeAssignment {
    return reflection.isInstance(item, TypeAssignment);
}

export interface MessTyAstType {
    Message: Message
    Model: Model
    Param: Param
    PrimitiveType: PrimitiveType
    Type: Type
    TypeAssignment: TypeAssignment
}

export class MessTyAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Message', 'Model', 'Param', 'PrimitiveType', 'Type', 'TypeAssignment'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'TypeAssignment:typeRef': {
                return Type;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Message': {
                return {
                    name: 'Message',
                    mandatory: [
                        { name: 'body', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'message', type: 'array' },
                        { name: 'type', type: 'array' }
                    ]
                };
            }
            case 'Type': {
                return {
                    name: 'Type',
                    mandatory: [
                        { name: 'body', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new MessTyAstReflection();
