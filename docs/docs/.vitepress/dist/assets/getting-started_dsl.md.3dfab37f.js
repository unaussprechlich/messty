import{_ as s,c as e,o as a,a as n}from"./app.041fde6c.js";const A=JSON.parse('{"title":"MessTy DSL","description":"","frontmatter":{},"headers":[{"level":2,"title":"Basic Syntax","slug":"basic-syntax","link":"#basic-syntax","children":[]},{"level":2,"title":"Primary Types","slug":"primary-types","link":"#primary-types","children":[{"level":3,"title":"String string","slug":"string-string","link":"#string-string","children":[]},{"level":3,"title":"Number number","slug":"number-number","link":"#number-number","children":[]},{"level":3,"title":"Boolean boolean","slug":"boolean-boolean","link":"#boolean-boolean","children":[]}]},{"level":2,"title":"Type","slug":"type","link":"#type","children":[]},{"level":2,"title":"Message","slug":"message","link":"#message","children":[]},{"level":2,"title":"Topic","slug":"topic","link":"#topic","children":[]}],"relativePath":"getting-started/dsl.md"}'),l={name:"getting-started/dsl.md"},t=n(`<h1 id="messty-dsl" tabindex="-1">MessTy DSL <a class="header-anchor" href="#messty-dsl" aria-hidden="true">#</a></h1><p>MessTy uses a domain-specific language (DSL) for describing the structure of a message. It is designed to be easy to read and write.</p><h2 id="basic-syntax" tabindex="-1">Basic Syntax <a class="header-anchor" href="#basic-syntax" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">type &lt;name&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;field&gt; : &lt;type&gt; | string | number | boolean</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">message &lt;name&gt; { </span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;field&gt; : &lt;type&gt; | string | number | boolean</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">topic &lt;name&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;message&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="primary-types" tabindex="-1">Primary Types <a class="header-anchor" href="#primary-types" aria-hidden="true">#</a></h2><h3 id="string-string" tabindex="-1">String <code>string</code> <a class="header-anchor" href="#string-string" aria-hidden="true">#</a></h3><p>A string is a sequence of characters. It is represented by a sequence of characters enclosed in double quotes.</p><h3 id="number-number" tabindex="-1">Number <code>number</code> <a class="header-anchor" href="#number-number" aria-hidden="true">#</a></h3><p>A number is a sequence of digits. It is represented by a sequence of digits.</p><h3 id="boolean-boolean" tabindex="-1">Boolean <code>boolean</code> <a class="header-anchor" href="#boolean-boolean" aria-hidden="true">#</a></h3><p>A boolean is a logical value. It is represented by the keywords <code>true</code> or <code>false</code>.</p><h2 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-hidden="true">#</a></h2><p>A type is a collection of fields. They are required to have a distinct <code>&lt;name&gt;</code> inside their <code>namespace</code>. The name of a type has tp start with a capital letter. By referring to the name of a type you can compose types together to create more complex types.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">type Person {</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: string</span></span>
<span class="line"><span style="color:#A6ACCD;">    age: number</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">type Employee {</span></span>
<span class="line"><span style="color:#A6ACCD;">    person: Person</span></span>
<span class="line"><span style="color:#A6ACCD;">    salary: number</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="message" tabindex="-1">Message <a class="header-anchor" href="#message" aria-hidden="true">#</a></h2><p>A message is a collection of fields. They are required to have a distinct <code>&lt;name&gt;</code> inside their <code>namespace</code>. These are the messages that will be parsed by the MessTy client.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">message NewEmployee {</span></span>
<span class="line"><span style="color:#A6ACCD;">    startDate: date</span></span>
<span class="line"><span style="color:#A6ACCD;">    employee: Employee</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="topic" tabindex="-1">Topic <a class="header-anchor" href="#topic" aria-hidden="true">#</a></h2><p>A topic is a collection of messages.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">topic Employee {</span></span>
<span class="line"><span style="color:#A6ACCD;">    NewEmployee</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,20),p=[t];function o(i,r,c,d,y,h){return a(),e("div",null,p)}const g=s(l,[["render",o]]);export{A as __pageData,g as default};
